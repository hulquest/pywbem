#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# (C) Copyright 2006-2007 Novell, Inc.
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
# Author: Bart Whiteley <bwhiteley suse.de>
# Author: Ross Peoples <ross.peoples@gmail.com>
#
 
"""
mof_compiler - Compile MOF files, and update the repository of a WBEM server
with the result.

Invoke with `-h` or `--help` for a help message.
"""
import os
import sys 
import argparse
from getpass import getpass

from pywbem._cliutils import SmartFormatter
from pywbem import WBEMConnection
from pywbem.mof_compiler import MOFWBEMConnection, MOFCompiler, MOFParseError

 
def main():
    """
    Parse command line arguments and process the specified MOF files.
    """

    prog = "mof_compiler"  # Name of the script file invoking this module
    usage = '%(prog)s [options] moffile ...'
    desc = 'Compile MOF files, and update the repository of a WBEM ' \
           'server with the result.'
    epilog = """
Example:
  %s CIM_Schema_2.45.mof -u https://localhost:15989 -n root/cimv2 -l sheldon -p penny42
""" % prog
    argparser = argparse.ArgumentParser(
        prog=prog, usage=usage, description=desc, epilog=epilog,
        add_help=False, formatter_class=SmartFormatter)

    pos_arggroup = argparser.add_argument_group(
        'Positional arguments')
    pos_arggroup.add_argument(
        'mof_files', metavar='moffile',
        nargs='*',
        help='R|Path name of the MOF file to be compiled.\n' \
             'Can be specified multiple times.')

    server_arggroup = argparser.add_argument_group(
        'Server related options',
        'Specify the WBEM server and namespace')
    server_arggroup.add_argument(
        '-u', '--url', dest='url', metavar='url',
        default='/var/run/tog-pegasus/cimxml.socket',
        help='R|URL of the WBEM server.\n' \
             'Default: %(default)s')
    server_arggroup.add_argument(
        '-n', '--namespace', dest='namespace', metavar='namespace',
        help='Namespace in the WBEM server to work against (required)')
    server_arggroup.add_argument(
        '-l', '--username', dest='username', metavar='username',
        help='R|Username for authenticating with the WBEM server.\n' \
             'Default: No username')
    server_arggroup.add_argument(
        '-p', '--password', dest='password', metavar='password',
        help='R|Password for authenticating with the WBEM server.\n' \
             'Default: No password')

    action_arggroup = argparser.add_argument_group(
        'Action related options',
        'Specify actions against the repository. Default: create/update ' \
        'elements.')
    action_arggroup.add_argument(
        '-r', '--remove', dest='remove',
        action='store_true', default=False,
        help='Remove elements (found in the MOF files) from the repository, ' \
             'instead of creating or updating them')
    action_arggroup.add_argument(
        '-d', '--dry-run', dest='dry_run',
        action='store_true', default=False,
        help="Don't actually modify the repository, just check MOF syntax. " \
             "Connection to WBEM server is still required to check " \
             "qualifiers.")

    general_arggroup = argparser.add_argument_group(
        'General options')
    general_arggroup.add_argument(
        '-s', '--search', dest='search_dirs', metavar='dir',
        action='append',
        help='Path name of an additional search directory for MOF include ' \
             'files. Can be specified multiple times.')
    general_arggroup.add_argument(
        '-v', '--verbose', dest='verbose',
        action='store_true', default=False,
        help='Print more messages while processing')
    general_arggroup.add_argument(
        '-h', '--help', action='help',
        help='Show this help message and exit')

    args = argparser.parse_args()

    if not args.mof_files:
        argparser.error('No MOF files specified')

    if not args.namespace:
        argparser.error('No namespace specified (-n/--namespace option)')

    passwd = args.password
    if args.username and not passwd:
        passwd = getpass('Enter password for %s: ' % args.username)
    if args.username:
        conn = WBEMConnection(args.url, (args.username, passwd))
    else:
        conn = WBEMConnection(args.url)

    if args.remove or args.dry_run:
        # Only record the changes to the repository, but do not perform them.
        conn = MOFWBEMConnection(conn=conn)

    #conn.debug = True
    conn.default_namespace = args.namespace

    search_dirs = args.search_dirs
    if search_dirs is None:
        search_dirs = []
    search_dirs = [os.path.abspath(x) for x in search_dirs]

    for fname in args.mof_files:
        path = os.path.abspath(os.path.dirname(fname))
        for spath in search_dirs:
            if path.startswith(spath):
                break
        else:
            search_dirs.append(path)

    # If removing, we'll be verbose later when we actually remove stuff.
    # We don't want MOFCompiler to be verbose, as that would be confusing.
    verbose = args.verbose and not args.remove

    mofcomp = MOFCompiler(handle=conn, search_paths=search_dirs,
                          verbose=verbose)

    try:
        for fname in args.mof_files:
            if fname[0] != '/':
                fname = os.path.curdir + '/' + fname
            mofcomp.compile_file(fname, args.namespace)
    except MOFParseError:
        sys.exit(1)
    except Error:
        sys.exit(1)

    if args.remove and not args.dry_run:
        # Removal works by recording the changes but not doing them, and then
        # rolling back and doing them.
        conn.rollback(verbose=args.verbose)


if __name__ == '__main__':
    rc = main()
    sys.exit(rc)
